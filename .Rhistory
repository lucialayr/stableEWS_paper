#gamma equilibrium runs
plot_gamma_eq = function(A =c(1.3, 1.5, 1.8, 2)) {
data = list()
for (a in A) {
df = read.csv(paste0("data_tamed_euler/gamma_lin_eq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a))
df_nol = read.csv(paste0("data_tamed_euler/gamma_nol_eq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a))
df = df_nol %>%
full_join(df) %>%
filter(gamma_sample < 10^40) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows)
df$system = factor(df$system, levels = c("Linear", "Non-linear \n(Fold)"))
colors = c("#000000", "#98C6EA")
colors_means = c("#E37222", "#98C6EA")
line_color = c("True \U03B3" = "grey50")
sizes = c(2.5, 2)
names(colors) <- levels(df$system)
names(colors_means) <- levels(df$system)
names(sizes) <- levels(df$system)
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean = mean(gamma_sample))
df_mean$system = factor(df_mean$system, levels = c("Non-linear \n(Fold)", "Linear"))
df$alpha <- factor(df$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
df_mean$alpha <- factor(df_mean$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
(p = ggplot() + theme_bw() +
geom_line(data = df, aes(x = k, y = gamma_true, color = "Theory", linetype = "Theory"), linewidth =.75) +
facet_wrap(~rev(alpha), labeller = label_parsed) +
geom_point(data = df, aes(x = k, y = gamma_sample, fill = system),
color = "grey20", stroke = 0.001, shape = 21, alpha = .5, position = position_jitter(width = .15), size = 1.5) +
geom_point(data = df_mean, aes(x = k, y = mean, fill = system, size = system), color = "black",  shape = 21, stroke = .5) +
scale_color_manual(values = line_color, name = " ") +
scale_size_manual(values = sizes, name = "System")  +
scale_fill_manual(values = colors_means, name = "System") +
scale_linetype_manual(values = c("Theory" = "dashed"), name = "") +
scale_y_continuous(trans = 'log10', name = expression(EWS~gamma[X])) +
scale_x_continuous(trans = 'log10', name = "Bifurcation parameter k", labels = scales::comma, breaks = c(0.01, 1, 100)) +
theme(text = element_text(size = 12)) +
guides(size = "none"))
return(p)
}
plot_gamma_eq()
#gamma non-equilibrium runs
plot_gamma_neq = function(A =c(1.3, 1.5, 1.8, 2), cutoff_theory = .15) {
data = list()
for (a in A) {
df = read.csv(paste0("data_tamed_euler/gamma_lin_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df_nol = read.csv(paste0("data_tamed_euler/gamma_nol_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df = df_nol %>%
full_join(df) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows) %>%
filter(timestep > 1000) %>%
group_by(alpha, system, sample) %>%
arrange(alpha, system, sample, k) %>%
mutate(gamma_smoothed = slider::slide_dbl(gamma_sample, mean, .before =50, .after = 50)) %>%
filter(gamma_true < cutoff_theory,
gamma_smoothed < cutoff_theory)
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean_gamma = mean(gamma_smoothed, na.rm = TRUE)) %>%
group_by(system) %>%
mutate(mean_max = max(mean_gamma),
mean_min = min(mean_gamma)) %>%
ungroup()
df$alpha <- factor(df$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
df_mean$alpha <- factor(df_mean$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
legend_labels = rev(c(TeX("$\\alpha$ = 2"), TeX("$\\alpha$ = 1.8"), TeX("$\\alpha$ = 1.5"), TeX("$\\alpha$ = 1.3")))
colors = c("#E37222", "#532d5b",  "#090979",  "#64A0C8")
(p = ggplot() + theme_bw() +
geom_line(data = df, aes(x = k, y = gamma_smoothed, group = interaction(run, alpha), color = alpha), alpha = .5, linewidth = .05) +
geom_line(data = df[df$system == "Linear",], aes(x = k, y = gamma_true, group = interaction(system, alpha), color = alpha, linetype = "Theory"), alpha = .8,  linewidth = .6) +
geom_line(data = df_mean, aes(x = k, y = mean_gamma, color = alpha), alpha = .9, linewidth = .7) +
scale_color_manual(values = colors,  name = expression(Estimated~gamma), labels = legend_labels) +
scale_linetype_manual(values = c("Theory" = "dashed"), name = "") +
facet_grid(rows = vars(system), cols = vars(alpha), scales = "free", labeller = label_parsed) +
scale_x_continuous(limits = c(0, 5.25), expression(symbol('\254')~~~Bifurcation~parameter~k)) +
scale_y_continuous(name = expression(gamma[X])) +
theme(panel.grid.minor = element_blank()))
return(p)
}
plot_gamma_neq()
#gamma non-equilibrium runs
plot_gamma_neq = function(A =c(1.3, 1.5, 1.8, 2), cutoff_theory = .15) {
data = list()
for (a in A) {
df = read.csv(paste0("data/tamed_euler/gamma_lin_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df_nol = read.csv(paste0("data/tamed_euler/gamma_nol_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df = df_nol %>%
full_join(df) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows) %>%
filter(timestep > 1000) %>%
group_by(alpha, system, sample) %>%
arrange(alpha, system, sample, k) %>%
mutate(gamma_smoothed = slider::slide_dbl(gamma_sample, mean, .before =50, .after = 50)) %>%
filter(gamma_true < cutoff_theory,
gamma_smoothed < cutoff_theory)
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean_gamma = mean(gamma_smoothed, na.rm = TRUE)) %>%
group_by(system) %>%
mutate(mean_max = max(mean_gamma),
mean_min = min(mean_gamma)) %>%
ungroup()
df$alpha <- factor(df$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
df_mean$alpha <- factor(df_mean$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
legend_labels = rev(c(TeX("$\\alpha$ = 2"), TeX("$\\alpha$ = 1.8"), TeX("$\\alpha$ = 1.5"), TeX("$\\alpha$ = 1.3")))
colors = c("#E37222", "#532d5b",  "#090979",  "#64A0C8")
(p = ggplot() + theme_bw() +
geom_line(data = df, aes(x = k, y = gamma_smoothed, group = interaction(run, alpha), color = alpha), alpha = .5, linewidth = .05) +
geom_line(data = df[df$system == "Linear",], aes(x = k, y = gamma_true, group = interaction(system, alpha), color = alpha, linetype = "Theory"), alpha = .8,  linewidth = .6) +
geom_line(data = df_mean, aes(x = k, y = mean_gamma, color = alpha), alpha = .9, linewidth = .7) +
scale_color_manual(values = colors,  name = expression(Estimated~gamma), labels = legend_labels) +
scale_linetype_manual(values = c("Theory" = "dashed"), name = "") +
facet_grid(rows = vars(system), cols = vars(alpha), scales = "free", labeller = label_parsed) +
scale_x_continuous(limits = c(0, 5.25), expression(symbol('\254')~~~Bifurcation~parameter~k)) +
scale_y_continuous(name = expression(gamma[X])) +
theme(panel.grid.minor = element_blank()))
return(p)
}
plot_gamma_neq()
ggsave("reports/paper/tamed_euler/gamma_noneq.png",  width = 8, height = 4, dpi = 1000)
ggsave("reports/paper/tamed_euler/gamma_noneq.pdf",  width = 8, height = 4, dpi = 1000)
#gamma non-equilibrium runs
plot_gamma_neq = function(A =c(1.3, 1.5, 1.8, 2), cutoff_theory = .5) {
data = list()
for (a in A) {
df = read.csv(paste0("data/tamed_euler/gamma_lin_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df_nol = read.csv(paste0("data/tamed_euler/gamma_nol_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df = df_nol %>%
full_join(df) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows) %>%
filter(timestep > 1000) %>%
group_by(alpha, system, sample) %>%
arrange(alpha, system, sample, k) %>%
mutate(gamma_smoothed = slider::slide_dbl(gamma_sample, mean, .before =50, .after = 50)) %>%
filter(gamma_true < cutoff_theory,
gamma_smoothed < cutoff_theory)
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean_gamma = mean(gamma_smoothed, na.rm = TRUE)) %>%
group_by(system) %>%
mutate(mean_max = max(mean_gamma),
mean_min = min(mean_gamma)) %>%
ungroup()
df$alpha <- factor(df$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
df_mean$alpha <- factor(df_mean$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
legend_labels = rev(c(TeX("$\\alpha$ = 2"), TeX("$\\alpha$ = 1.8"), TeX("$\\alpha$ = 1.5"), TeX("$\\alpha$ = 1.3")))
colors = c("#E37222", "#532d5b",  "#090979",  "#64A0C8")
(p = ggplot() + theme_bw() +
geom_line(data = df, aes(x = k, y = gamma_smoothed, group = interaction(run, alpha), color = alpha), alpha = .5, linewidth = .05) +
geom_line(data = df[df$system == "Linear",], aes(x = k, y = gamma_true, group = interaction(system, alpha), color = alpha, linetype = "Theory"), alpha = .8,  linewidth = .6) +
geom_line(data = df_mean, aes(x = k, y = mean_gamma, color = alpha), alpha = .9, linewidth = .7) +
scale_color_manual(values = colors,  name = expression(Estimated~gamma), labels = legend_labels) +
scale_linetype_manual(values = c("Theory" = "dashed"), name = "") +
facet_grid(rows = vars(system), cols = vars(alpha), scales = "free", labeller = label_parsed) +
scale_x_continuous(limits = c(0, 5.25), expression(symbol('\254')~~~Bifurcation~parameter~k)) +
scale_y_continuous(name = expression(gamma[X])) +
theme(panel.grid.minor = element_blank()))
return(p)
}
plot_gamma_neq()
ggsave("reports/paper/tamed_euler/gamma_noneq.png",  width = 8, height = 4, dpi = 1000)
ggsave("reports/paper/tamed_euler/gamma_noneq.pdf",  width = 8, height = 4, dpi = 1000)
#gamma non-equilibrium runs
plot_gamma_neq = function(A =c(1.3, 1.5, 1.8, 2), cutoff_theory = .15) {
data = list()
for (a in A) {
df = read.csv(paste0("data/tamed_euler/gamma_lin_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df_nol = read.csv(paste0("data/tamed_euler/gamma_nol_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df = df_nol %>%
full_join(df) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows) %>%
filter(timestep > 1000) %>%
group_by(alpha, system, sample) %>%
arrange(alpha, system, sample, k) %>%
mutate(gamma_smoothed = slider::slide_dbl(gamma_sample, mean, .before =50, .after = 50)) %>%
filter(gamma_true < cutoff_theory,
gamma_smoothed < cutoff_theory)
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean_gamma = mean(gamma_smoothed, na.rm = TRUE)) %>%
group_by(system) %>%
mutate(mean_max = max(mean_gamma),
mean_min = min(mean_gamma)) %>%
ungroup()
df$alpha <- factor(df$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
df_mean$alpha <- factor(df_mean$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
legend_labels = rev(c(TeX("$\\alpha$ = 2"), TeX("$\\alpha$ = 1.8"), TeX("$\\alpha$ = 1.5"), TeX("$\\alpha$ = 1.3")))
colors = c("#E37222", "#532d5b",  "#090979",  "#64A0C8")
(p = ggplot() + theme_bw() +
geom_line(data = df, aes(x = k, y = gamma_smoothed, group = interaction(run, alpha), color = alpha), alpha = .5, linewidth = .05) +
geom_line(data = df[df$system == "Linear",], aes(x = k, y = gamma_true, group = interaction(system, alpha), color = alpha, linetype = "Theory"), alpha = .8,  linewidth = .6) +
geom_line(data = df_mean, aes(x = k, y = mean_gamma, color = alpha), alpha = .9, linewidth = .7) +
scale_color_manual(values = colors,  name = expression(Estimated~gamma), labels = legend_labels) +
scale_linetype_manual(values = c("Theory" = "dashed"), name = "") +
facet_grid(rows = vars(system), cols = vars(alpha), scales = "free", labeller = label_parsed) +
scale_x_continuous(limits = c(0, 5.25), expression(symbol('\254')~~~Bifurcation~parameter~k)) +
scale_y_continuous(name = expression(gamma[X])) +
theme(panel.grid.minor = element_blank()))
return(p)
}
plot_gamma_neq()
#gamma non-equilibrium runs
plot_gamma_neq = function(A =c(1.3, 1.5, 1.8, 2), cutoff_theory = .15) {
data = list()
for (a in A) {
df = read.csv(paste0("data/tamed_euler/gamma_lin_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df_nol = read.csv(paste0("data/tamed_euler/gamma_nol_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df = df_nol %>%
full_join(df) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows) %>%
filter(timestep > 1000) %>%
group_by(alpha, system, sample) %>%
arrange(alpha, system, sample, k) %>%
mutate(gamma_smoothed = slider::slide_dbl(gamma_sample, mean, .before =50, .after = 50)) %>%
filter(gamma_true < cutoff_theory,
gamma_smoothed < cutoff_theory)
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean_gamma = mean(gamma_smoothed, na.rm = TRUE)) %>%
group_by(system) %>%
mutate(mean_max = max(mean_gamma),
mean_min = min(mean_gamma)) %>%
ungroup()
df$alpha <- factor(df$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
df_mean$alpha <- factor(df_mean$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
legend_labels = rev(c(TeX("$\\alpha$ = 2"), TeX("$\\alpha$ = 1.8"), TeX("$\\alpha$ = 1.5"), TeX("$\\alpha$ = 1.3")))
colors = c("#E37222", "#532d5b",  "#090979",  "#64A0C8")
(p = ggplot() + theme_bw() +
geom_line(data = df, aes(x = k, y = gamma_smoothed, group = interaction(run, alpha), color = alpha), alpha = .5, linewidth = .05) +
geom_line(data = df[df$system == "Linear",], aes(x = k, y = gamma_true, group = interaction(system, alpha), color = alpha, linetype = "Theory"), alpha = .8,  linewidth = .6) +
geom_line(data = df_mean, aes(x = k, y = mean_gamma, color = alpha), alpha = .9, linewidth = .7) +
scale_color_manual(values = colors,  name = expression(Estimated~gamma), labels = legend_labels) +
scale_linetype_manual(values = c("Theory" = "dashed"), name = "") +
facet_grid(rows = vars(system), cols = vars(alpha), scales = "free", labeller = label_parsed) +
scale_x_continuous(limits = c(0, 5.25), expression(symbol('\254')~~~Bifurcation~parameter~k)) +
scale_y_continuous(name = expression(gamma[X])) +
theme(panel.grid.minor = element_blank()))
return(p)
}
plot_gamma_neq()
ggsave("reports/paper/tamed_euler/gamma_noneq.png",  width = 8, height = 4, dpi = 1000)
ggsave("reports/paper/tamed_euler/gamma_noneq.pdf",  width = 8, height = 4, dpi = 1000)
#gamma equilibrium runs
plot_gamma_eq = function(A =c(1.3, 1.5, 1.8, 2)) {
data = list()
for (a in A) {
df = read.csv(paste0("data/tamed_euler/gamma_lin_eq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a))
df_nol = read.csv(paste0("data/tamed_euler/gamma_nol_eq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a))
df = df_nol %>%
full_join(df) %>%
filter(gamma_sample < 10^40) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows)
df$system = factor(df$system, levels = c("Linear", "Non-linear \n(Fold)"))
colors = c("#000000", "#98C6EA")
colors_means = c("#E37222", "#98C6EA")
line_color = c("True \U03B3" = "grey50")
sizes = c(2.5, 2)
names(colors) <- levels(df$system)
names(colors_means) <- levels(df$system)
names(sizes) <- levels(df$system)
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean = mean(gamma_sample))
df_mean$system = factor(df_mean$system, levels = c("Non-linear \n(Fold)", "Linear"))
df$alpha <- factor(df$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
df_mean$alpha <- factor(df_mean$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
(p = ggplot() + theme_bw() +
geom_line(data = df, aes(x = k, y = gamma_true, color = "Theory", linetype = "Theory"), linewidth =.75) +
facet_wrap(~rev(alpha), labeller = label_parsed) +
geom_point(data = df, aes(x = k, y = gamma_sample, fill = system),
color = "grey20", stroke = 0.001, shape = 21, alpha = .5, position = position_jitter(width = .15), size = 1.5) +
geom_point(data = df_mean, aes(x = k, y = mean, fill = system, size = system), color = "black",  shape = 21, stroke = .5) +
scale_color_manual(values = line_color, name = " ") +
scale_size_manual(values = sizes, name = "System")  +
scale_fill_manual(values = colors_means, name = "System") +
scale_linetype_manual(values = c("Theory" = "dashed"), name = "") +
scale_y_continuous(trans = 'log10', name = expression(EWS~gamma[X])) +
scale_x_continuous(trans = 'log10', name = "Bifurcation parameter k", labels = scales::comma, breaks = c(0.01, 1, 100)) +
theme(text = element_text(size = 12)) +
guides(size = "none"))
return(p)
}
plot_gamma_eq()
#benchmark
benchmark_gL = function() {
df = read.csv("data/tamed_euler/benchmark_gammaL.csv") %>%
filter(gamma !=0)
df$alpha = factor(df$alpha, levels = c(2, 1.8, 1.5, 1.3))
df$alpha = with(df, factor(alpha, levels = rev(levels(alpha))))
colors_long = c("#E37222", "#532d5b", "#090979", "#64A0C8"  )
(p1 = ggplot() + theme_bw() +
geom_vline(xintercept = 1, color = "black", linewidth = .5) +
geom_density_ridges(data = df,
aes(x = gamma, y = alpha, fill = alpha, group = alpha),
jittered_points = TRUE,
position = position_points_jitter(width = 0.0, height = 0),
point_shape = '|', point_size = 2, point_alpha = 1, alpha = 0.4, size = 0.6) +
scale_fill_manual(values = colors_long, name = expression(alpha)) +
scale_x_continuous(limits = c(0.7, 1.3), name = expression(gamma[~L]), breaks = c(0.75, 1, 1.25)) +
scale_y_discrete(name = expression(alpha[~~L]), expand = expand_scale(mult = c(0.25, .7))) +
theme(text = element_text(size = 15),
legend.position=c(.5,.05),
legend.direction = "horizontal",
legend.background = element_rect(fill='transparent', color = NA),
legend.box.background = element_rect(fill='white', color = "darkgrey"),
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
strip.background = element_rect(fill = "transparent", color = NA)))
return(p1)
}
p1 = benchmark_gL()
benchmark_gX = function() {
A =c(2, 1.3, 1.5, 1.8)
data = list()
for (a in A){
df = read.csv(paste0("data/tamed_euler/benchmark_gammaX_alpha", a, ".csv")) %>%
filter(W_in != 0,
T_in !=1,
gamma_sample < 2000)
data = append(data, list(df))
df_onetraj = read.csv(paste0("data/tamed_euler/benchmark_gammaX_alpha", a, ".csv")) %>%
filter(W_in != 0,
gamma_sample < 2000)
data = append(data, list(df_onetraj))
}
df = purrr::reduce(data, bind_rows) %>%
group_by(alpha, W_in, T_in)  %>%
summarise(gamma_sd = sqrt(var(gamma_sample, na.rm = TRUE)),
gamma_sample = mean(gamma_sample)) %>%
mutate(gamma_true = 0.1*(1/(alpha))^(1/alpha),
Error = ((gamma_sample - gamma_true)^2)/gamma_true,
gamma_sd = gamma_sd/gamma_true)
box = df %>%
filter(W_in == 70,
T_in == 5)
df$alpha = factor(df$alpha,
levels = rev(c(2.0, 1.8, 1.5, 1.3)),
labels=rev(c('2.0'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
box$alpha = factor(box$alpha,
levels = rev(c(2.0, 1.8, 1.5, 1.3)),
labels=rev(c('2.0'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
(p = ggplot() + theme_bw() +
geom_point(data = df, aes(x = as.factor(W_in), y = as.factor(T_in), fill = (Error), size = (abs(gamma_sd))),
shape = 21, color = "black") +
geom_point(data = box, aes(x = as.factor(W_in), y = as.factor(T_in), size =(abs(gamma_sd))),
shape = 0, color = "darkgrey",size = 8) +
scico::scale_fill_scico(palette = "lapaz", direction = -1,  name = "MSE") +
scale_x_discrete(name = "Window size") +
scale_y_discrete(name = "Number of trajectories") +
scale_size_continuous(name = "Standard Error", range = c(1, 7)) +
facet_wrap(~(factor(alpha)), labeller=label_parsed)  +
theme(text = element_text(size = 12),
strip.background = element_rect(fill = "transparent")))
ggplot() +
geom_jitter(data = df[df$alpha == 2 ,], aes(x = as.factor(W_in), y = as.factor(T_in), color = delta)) +
facet_wrap(~alpha, scales = "free") +
scico::scale_color_scico(palette = "roma", midpoint = 0)
return(p)
}
p2 = benchmark_gX()
plot_grid(p1, p2, nrow = 1, labels = c("(a)", "(c)"), rel_widths = c(4,5))
ggsave("reports/paper/tamed_euler/benchmark.png", width = 8, height = 4, bg = "white")
ggsave("reports/paper/tamed_euler/benchmark.pdf", width = 8, height = 4, bg = "white", dpi = 600)
