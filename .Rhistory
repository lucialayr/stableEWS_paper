sizes = c(2.5, 2)
names(colors) <- levels(df$system)
names(colors_means) <- levels(df$system)
names(sizes) <- levels(df$system)
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean = mean(gamma_sample))
df_mean$system = factor(df_mean$system, levels = c("Non-linear \n(Fold)", "Linear"))
df$alpha <- factor(df$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
df_mean$alpha <- factor(df_mean$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
(p = ggplot() +
geom_vline(xintercept = 0, color = "black", linewidth = .75) +
geom_line(data = df, aes(x = k, y = gamma_true, color = "Theory", linetype = "Theory", shape = "Theory"), linewidth = .75) +
facet_wrap(~rev(alpha), labeller = label_parsed, nrow = 1) +
geom_point(data = df, aes(x = k, y = gamma_sample, color = system, shape = system, linetype = system),
stroke = 0.2, position = position_jitter(width = .25), size = 0.25, alpha = .4) +
geom_point(data = df_mean, aes(x = k, y = mean, color = system, shape = system, size = system, linetype = system),
stroke = 1) +
scale_size_manual(values = c("Linear" = 3, "Non-linear \n(Fold)" = 3, "Theory" = 3), name = "System") +
scale_shape_manual(values = c("Linear" = 3, "Non-linear \n(Fold)" = 4, "Theory" = 21), name = "System") +
scale_color_manual(values = c("Linear" = "#56B4E9", "Non-linear \n(Fold)" = "#E69F00", "Theory" = "#D55E00"), name = "System") +
scale_linetype_manual(values = c("Linear" = "solid", "Non-linear \n(Fold)" = "solid", "Theory" = "dashed"), name = "System") +
scale_y_continuous(trans = 'log10', name = expression(EWS~gamma[X]), expand = c(0,0)) +
scale_x_continuous(trans = 'log10', name = "Bifurcation parameter k",
breaks = c(0.01, 1, 100), labels = c("0.01", "1", "100"),expand = c(0,0)) +
theme(axis.text.x = element_text(hjust = 0.75, size = 15),
legend.position = "bottom",
legend.direction = "horizontal") +
guides(size = "none"))
return(p)
}
plot_gamma_eq()
ggsave("reports/paper/gamma_equilibrium_diss.pdf", width = 9.5, height = 4, scale = 1)
#gamma non-equilibrium runs
plot_gamma_neq = function(A =c(1.3, 1.5, 1.8, 2), cutoff_theory = .15) {
data = list()
for (a in A) {
df = read.csv(paste0("data/gamma_lin_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df_nol = read.csv(paste0("data/gamma_nol_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df = df_nol %>%
full_join(df) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows) %>%
filter(timestep > 1000) %>%
group_by(alpha, system, sample) %>%
arrange(alpha, system, sample, k) %>%
mutate(gamma_smoothed = slider::slide_dbl(gamma_sample, mean, .before =50, .after = 50)) %>%
filter(gamma_true < cutoff_theory,
gamma_smoothed < cutoff_theory)
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean_gamma = mean(gamma_smoothed, na.rm = TRUE)) %>%
group_by(system) %>%
mutate(mean_max = max(mean_gamma),
mean_min = min(mean_gamma)) %>%
ungroup()
df$alpha_label <- factor(df$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
df_mean$alpha_label <- factor(df_mean$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
legend_labels = (c(TeX("$\\alpha$ = 2"), TeX("$\\alpha$ = 1.8"), TeX("$\\alpha$ = 1.5"), TeX("$\\alpha$ = 1.3"), "Theory"))
colors = rev(c("2" = "black", "1.8" =  "#0072B2", "1.5" = "#009E73", "1.3" =  "#56B4E9", "Theory" = "#D55E00"))
(p = ggplot() +
geom_vline(xintercept = 0, color = "black", linewidth = .75) +
geom_hline(yintercept = 0.025, color = "black", linewidth = 0.75) +
geom_line(data = df, aes(x = k, y = gamma_smoothed, group = interaction(run, alpha), color = as.factor(alpha), linetype = "Simulation"),
alpha = .75, linewidth = .001) +
geom_line(data = df[df$system == "Linear",], aes(x = k, y = gamma_true, group = interaction(system, alpha),
color = "Theory", linetype = "Theory"), linewidth = .6) +
geom_line(data = df_mean, aes(x = k, y = mean_gamma, color = as.factor(alpha), linetype = "Simulation"),
alpha = .9, linewidth = .7) +
scale_color_manual(values = colors,  name = expression(~gamma[X])) +
scale_linetype_manual(values = c("Theory" = "dashed", "Simulation" = "solid"), name = expression(~gamma[X])) +
scale_x_continuous(limits = c(0.25, 5), expand = c(0,0), breaks = c(1, 3, 5), name = expression(symbol('\254')~~~Bifurcation~parameter~k)) +
scale_y_continuous(name = expression(gamma[X]), limits = c(0.025, 0.08), expand = c(0,0), breaks = c(0, 0.05, 0.075)) +
facet_grid(rows = vars(system), cols = vars(alpha_label), scales = "free", labeller = label_parsed) +
theme(legend.position = "bottom",
legend.direction = "horizontal") +
guides(color = guide_legend(ncol = 4, byrow = TRUE),
linetype = "none"))
return(p)
}
plot_gamma_neq()
#gamma non-equilibrium runs
plot_gamma_neq = function(A =c(1.3, 1.5, 1.8, 2), cutoff_theory = .15) {
data = list()
for (a in A) {
df = read.csv(paste0("data/gamma_lin_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df_nol = read.csv(paste0("data/gamma_nol_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df = df_nol %>%
full_join(df) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows) %>%
filter(timestep > 1000) %>%
group_by(alpha, system, sample) %>%
arrange(alpha, system, sample, k) %>%
mutate(gamma_smoothed = slider::slide_dbl(gamma_sample, mean, .before =50, .after = 50)) %>%
filter(gamma_true < cutoff_theory,
gamma_smoothed < cutoff_theory)
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean_gamma = mean(gamma_smoothed, na.rm = TRUE)) %>%
group_by(system) %>%
mutate(mean_max = max(mean_gamma),
mean_min = min(mean_gamma)) %>%
ungroup()
df$alpha_label <- factor(df$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
df_mean$alpha_label <- factor(df_mean$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
legend_labels = (c(TeX("$\\alpha$ = 2"), TeX("$\\alpha$ = 1.8"), TeX("$\\alpha$ = 1.5"), TeX("$\\alpha$ = 1.3"), "Theory"))
colors = rev(c("2" = "black", "1.8" =  "#0072B2", "1.5" = "#009E73", "1.3" =  "#56B4E9", "Theory" = "#D55E00"))
(p = ggplot() +
geom_vline(xintercept = 0, color = "black", linewidth = .75) +
geom_hline(yintercept = 0.025, color = "black", linewidth = 0.75) +
geom_line(data = df, aes(x = k, y = gamma_smoothed, group = interaction(run, alpha), color = as.factor(alpha), linetype = "Simulation"),
alpha = .75, linewidth = .001) +
geom_line(data = df[df$system == "Linear",], aes(x = k, y = gamma_true, group = interaction(system, alpha),
color = "Theory", linetype = "Theory"), linewidth = .6) +
geom_line(data = df_mean, aes(x = k, y = mean_gamma, color = as.factor(alpha), linetype = "Simulation"),
alpha = .9, linewidth = .7) +
scale_color_manual(values = colors,  name = expression(~gamma[X])) +
scale_linetype_manual(values = c("Theory" = "dashed", "Simulation" = "solid"), name = expression(~gamma[X])) +
scale_x_continuous(limits = c(0.25, 5), expand = c(0,0), breaks = c(1, 3, 5), name = expression(symbol('\254')~~~Bifurcation~parameter~k)) +
scale_y_continuous(name = expression(gamma[X]), limits = c(0.025, 0.09), expand = c(0,0), breaks = c(0, 0.05, 0.075)) +
facet_grid(rows = vars(system), cols = vars(alpha_label), scales = "free", labeller = label_parsed) +
theme(legend.position = "bottom",
legend.direction = "horizontal") +
guides(color = guide_legend(ncol = 4, byrow = TRUE),
linetype = "none"))
return(p)
}
plot_gamma_neq()
plot_gamma_neq()
ggsave("reports/paper/gamma_noneq_diss.pdf",  width = 10, height = 6, scale = 1)
plot_0.9 = function() {
data = list()
for (a in A) {
df = read.csv(paste0("data/gamma_lin_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df_nol = read.csv(paste0("data/gamma_nol_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df = df_nol %>%
full_join(df) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows) %>%
filter(timestep > 1000) %>%
group_by(alpha, system, sample) %>%
arrange(alpha, system, sample, k) %>%
mutate(gamma_smoothed = slider::slide_dbl(gamma_sample, mean, .before =50, .after = 50))
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean_gamma = mean(gamma_smoothed, na.rm = TRUE)) %>%
group_by(system) %>%
ungroup()
df$alpha_label <- factor(df$alpha,
levels = rev(c(0.9)),
labels=rev(c('0.9'=parse(text=TeX('$\\alpha$ = 0.9')))))
df_mean$alpha_label <- factor(df_mean$alpha,
levels = rev(c(0.9)),
labels=rev(c('0.9'=parse(text=TeX('$\\alpha$ = 0.9')))))
legend_labels = (c(TeX("$\\alpha$ = 2"), TeX("$\\alpha$ = 1.8"), TeX("$\\alpha$ = 1.5"), TeX("$\\alpha$ = 1.3"), TeX("$\\alpha$ = 0.9"),, "Theory"))
colors = rev(c("2" = "black", "1.8" =  "#0072B2", "1.5" = "#009E73", "1.3" =  "#56B4E9", "0.9" =  "#56B4E9", "Theory" = "#D55E00"))
(p = ggplot() +
geom_vline(xintercept = 0, color = "black", linewidth = .75) +
geom_hline(yintercept = 0.025, color = "black", linewidth = 0.75) +
geom_line(data = df, aes(x = k, y = gamma_smoothed, group = interaction(run, alpha), color = as.factor(alpha), linetype = "Simulation"),
alpha = .75, linewidth = .001) +
geom_line(data = df[df$system == "Linear",], aes(x = k, y = gamma_true, group = interaction(system, alpha),
color = "Theory", linetype = "Theory"), linewidth = .6) +
geom_line(data = df_mean, aes(x = k, y = mean_gamma, color = as.factor(alpha), linetype = "Simulation"),
alpha = .9, linewidth = .7) +
scale_color_manual(values = colors,  name = expression(~gamma[X])) +
scale_linetype_manual(values = c("Theory" = "dashed", "Simulation" = "solid"), name = expression(~gamma[X])) +
scale_x_continuous(limits = c(0.25, 5), expand = c(0,0), breaks = c(1, 3, 5), name = expression(symbol('\254')~~~Bifurcation~parameter~k)) +
scale_y_continuous(name = expression(gamma[X]), expand = c(0,0), breaks = c(0, 0.05, 0.075)) +
facet_grid(rows = vars(system), cols = vars(alpha_label), scales = "free", labeller = label_parsed) +
theme(legend.position = "bottom",
legend.direction = "horizontal") +
guides(color = guide_legend(ncol = 4, byrow = TRUE),
linetype = "none"))
}
data = list()
for (a in A) {
df = read.csv(paste0("data/gamma_lin_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df_nol = read.csv(paste0("data/gamma_nol_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df = df_nol %>%
full_join(df) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
A = 0.9
data = list()
for (a in A) {
df = read.csv(paste0("data/gamma_lin_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df_nol = read.csv(paste0("data/gamma_nol_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df = df_nol %>%
full_join(df) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows) %>%
filter(timestep > 1000) %>%
group_by(alpha, system, sample) %>%
arrange(alpha, system, sample, k) %>%
mutate(gamma_smoothed = slider::slide_dbl(gamma_sample, mean, .before =50, .after = 50))
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean_gamma = mean(gamma_smoothed, na.rm = TRUE)) %>%
group_by(system) %>%
ungroup()
df$alpha_label <- factor(df$alpha,
levels = rev(c(0.9)),
labels=rev(c('0.9'=parse(text=TeX('$\\alpha$ = 0.9')))))
df_mean$alpha_label <- factor(df_mean$alpha,
levels = rev(c(0.9)),
labels=rev(c('0.9'=parse(text=TeX('$\\alpha$ = 0.9')))))
legend_labels = (c(TeX("$\\alpha$ = 2"), TeX("$\\alpha$ = 1.8"), TeX("$\\alpha$ = 1.5"), TeX("$\\alpha$ = 1.3"), TeX("$\\alpha$ = 0.9"),, "Theory"))
colors = rev(c("2" = "black", "1.8" =  "#0072B2", "1.5" = "#009E73", "1.3" =  "#56B4E9", "0.9" =  "#56B4E9", "Theory" = "#D55E00"))
(p = ggplot() +
geom_vline(xintercept = 0, color = "black", linewidth = .75) +
geom_hline(yintercept = 0.025, color = "black", linewidth = 0.75) +
geom_line(data = df, aes(x = k, y = gamma_smoothed, group = interaction(run, alpha), color = as.factor(alpha), linetype = "Simulation"),
alpha = .75, linewidth = .001) +
geom_line(data = df[df$system == "Linear",], aes(x = k, y = gamma_true, group = interaction(system, alpha),
color = "Theory", linetype = "Theory"), linewidth = .6) +
geom_line(data = df_mean, aes(x = k, y = mean_gamma, color = as.factor(alpha), linetype = "Simulation"),
alpha = .9, linewidth = .7) +
scale_color_manual(values = colors,  name = expression(~gamma[X])) +
scale_linetype_manual(values = c("Theory" = "dashed", "Simulation" = "solid"), name = expression(~gamma[X])) +
scale_x_continuous(limits = c(0.25, 5), expand = c(0,0), breaks = c(1, 3, 5), name = expression(symbol('\254')~~~Bifurcation~parameter~k)) +
scale_y_continuous(name = expression(gamma[X]), expand = c(0,0), breaks = c(0, 0.05, 0.075)) +
facet_grid(rows = vars(system), cols = vars(alpha_label), scales = "free", labeller = label_parsed) +
theme(legend.position = "bottom",
legend.direction = "horizontal") +
guides(color = guide_legend(ncol = 4, byrow = TRUE),
linetype = "none"))
data = list()
for (a in A) {
df = read.csv(paste0("data/gamma_lin_eq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a))
df_nol = read.csv(paste0("data/gamma_nol_eq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a))
df = df_nol %>%
full_join(df) %>%
filter(gamma_sample < 10^40) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows)
df$system = factor(df$system, levels = c("Linear", "Non-linear \n(Fold)"))
colors = c("#000000", "#98C6EA")
colors_means = c("#56B4E9", "#E69F00")
line_color = c("Theory" = "#D55E00")
sizes = c(2.5, 2)
names(colors) <- levels(df$system)
names(colors_means) <- levels(df$system)
names(sizes) <- levels(df$system)
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean = mean(gamma_sample))
df_mean$system = factor(df_mean$system, levels = c("Non-linear \n(Fold)", "Linear"))
df$alpha <- factor(df$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
df_mean$alpha <- factor(df_mean$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
(p = ggplot() +
geom_vline(xintercept = 0, color = "black", linewidth = .75) +
geom_line(data = df, aes(x = k, y = gamma_true, color = "Theory", linetype = "Theory", shape = "Theory"), linewidth = .75) +
facet_wrap(~rev(alpha), labeller = label_parsed, nrow = 1) +
geom_point(data = df, aes(x = k, y = gamma_sample, color = system, shape = system, linetype = system),
stroke = 0.2, position = position_jitter(width = .25), size = 0.25, alpha = .4) +
geom_point(data = df_mean, aes(x = k, y = mean, color = system, shape = system, size = system, linetype = system),
stroke = 1) +
scale_size_manual(values = c("Linear" = 3, "Non-linear \n(Fold)" = 3, "Theory" = 3), name = "System") +
scale_shape_manual(values = c("Linear" = 3, "Non-linear \n(Fold)" = 4, "Theory" = 21), name = "System") +
scale_color_manual(values = c("Linear" = "#56B4E9", "Non-linear \n(Fold)" = "#E69F00", "Theory" = "#D55E00"), name = "System") +
scale_linetype_manual(values = c("Linear" = "solid", "Non-linear \n(Fold)" = "solid", "Theory" = "dashed"), name = "System") +
scale_y_continuous(trans = 'log10', name = expression(EWS~gamma[X]), expand = c(0,0)) +
scale_x_continuous(trans = 'log10', name = "Bifurcation parameter k",
breaks = c(0.01, 1, 100), labels = c("0.01", "1", "100"),expand = c(0,0)) +
theme(axis.text.x = element_text(hjust = 0.75, size = 15),
legend.position = "bottom",
legend.direction = "horizontal") +
guides(size = "none"))
data = list()
for (a in A) {
df = read.csv(paste0("data/gamma_lin_eq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a))
df_nol = read.csv(paste0("data/gamma_nol_eq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a))
df = df_nol %>%
full_join(df) %>%
filter(gamma_sample < 10^40) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows)
df$system = factor(df$system, levels = c("Linear", "Non-linear \n(Fold)"))
colors = c("#000000", "#98C6EA")
colors_means = c("#56B4E9", "#E69F00")
line_color = c("Theory" = "#D55E00")
sizes = c(2.5, 2)
names(colors) <- levels(df$system)
names(colors_means) <- levels(df$system)
names(sizes) <- levels(df$system)
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean = mean(gamma_sample))
df_mean$system = factor(df_mean$system, levels = c("Non-linear \n(Fold)", "Linear"))
(p = ggplot() +
geom_vline(xintercept = 0, color = "black", linewidth = .75) +
geom_line(data = df, aes(x = k, y = gamma_true, color = "Theory", linetype = "Theory", shape = "Theory"), linewidth = .75) +
facet_wrap(~rev(alpha), labeller = label_parsed, nrow = 1) +
geom_point(data = df, aes(x = k, y = gamma_sample, color = system, shape = system, linetype = system),
stroke = 0.2, position = position_jitter(width = .25), size = 0.25, alpha = .4) +
geom_point(data = df_mean, aes(x = k, y = mean, color = system, shape = system, size = system, linetype = system),
stroke = 1) +
scale_size_manual(values = c("Linear" = 3, "Non-linear \n(Fold)" = 3, "Theory" = 3), name = "System") +
scale_shape_manual(values = c("Linear" = 3, "Non-linear \n(Fold)" = 4, "Theory" = 21), name = "System") +
scale_color_manual(values = c("Linear" = "#56B4E9", "Non-linear \n(Fold)" = "#E69F00", "Theory" = "#D55E00"), name = "System") +
scale_linetype_manual(values = c("Linear" = "solid", "Non-linear \n(Fold)" = "solid", "Theory" = "dashed"), name = "System") +
scale_y_continuous(trans = 'log10', name = expression(EWS~gamma[X]), expand = c(0,0)) +
scale_x_continuous(trans = 'log10', name = "Bifurcation parameter k",
breaks = c(0.01, 1, 100), labels = c("0.01", "1", "100"),expand = c(0,0)) +
theme(axis.text.x = element_text(hjust = 0.75, size = 15),
legend.position = "bottom",
legend.direction = "horizontal") +
guides(size = "none"))
df$alpha <- factor(df$alpha,
levels = rev(c(0.9)),
labels=rev(c('0.9'=parse(text=TeX('$\\alpha$ = 0.9')))))
df_mean$alpha <- factor(df_mean$alpha,
levels = rev(c(0.9)),
labels=rev(c('0.9'=parse(text=TeX('$\\alpha$ = 0.9')))))
(p = ggplot() +
geom_vline(xintercept = 0, color = "black", linewidth = .75) +
geom_line(data = df, aes(x = k, y = gamma_true, color = "Theory", linetype = "Theory", shape = "Theory"), linewidth = .75) +
facet_wrap(~rev(alpha), labeller = label_parsed, nrow = 1) +
geom_point(data = df, aes(x = k, y = gamma_sample, color = system, shape = system, linetype = system),
stroke = 0.2, position = position_jitter(width = .25), size = 0.25, alpha = .4) +
geom_point(data = df_mean, aes(x = k, y = mean, color = system, shape = system, size = system, linetype = system),
stroke = 1) +
scale_size_manual(values = c("Linear" = 3, "Non-linear \n(Fold)" = 3, "Theory" = 3), name = "System") +
scale_shape_manual(values = c("Linear" = 3, "Non-linear \n(Fold)" = 4, "Theory" = 21), name = "System") +
scale_color_manual(values = c("Linear" = "#56B4E9", "Non-linear \n(Fold)" = "#E69F00", "Theory" = "#D55E00"), name = "System") +
scale_linetype_manual(values = c("Linear" = "solid", "Non-linear \n(Fold)" = "solid", "Theory" = "dashed"), name = "System") +
scale_y_continuous(trans = 'log10', name = expression(EWS~gamma[X]), expand = c(0,0)) +
scale_x_continuous(trans = 'log10', name = "Bifurcation parameter k",
breaks = c(0.01, 1, 100), labels = c("0.01", "1", "100"),expand = c(0,0)) +
theme(axis.text.x = element_text(hjust = 0.75, size = 15),
legend.position = "bottom",
legend.direction = "horizontal") +
guides(size = "none"))
data = list()
for (a in A) {
df = read.csv(paste0("data/gamma_lin_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df_nol = read.csv(paste0("data/gamma_nol_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df = df_nol %>%
full_join(df) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
View(df)
df = purrr::reduce(data, bind_rows) %>%
filter(timestep > 1000) %>%
group_by(alpha, system, sample) %>%
arrange(alpha, system, sample, k) %>%
mutate(gamma_smoothed = slider::slide_dbl(gamma_sample, mean, .before =50, .after = 50))
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean_gamma = mean(gamma_smoothed, na.rm = TRUE)) %>%
group_by(system) %>%
ungroup()
(p = ggplot() +
geom_vline(xintercept = 0, color = "black", linewidth = .75) +
geom_hline(yintercept = 0.025, color = "black", linewidth = 0.75) +
geom_line(data = df, aes(x = k, y = gamma_smoothed, group = interaction(run, alpha), color = as.factor(alpha), linetype = "Simulation"),
alpha = .75, linewidth = .001) +
geom_line(data = df[df$system == "Linear",], aes(x = k, y = gamma_true, group = interaction(system, alpha),
color = "Theory", linetype = "Theory"), linewidth = .6) +
geom_line(data = df_mean, aes(x = k, y = mean_gamma, color = as.factor(alpha), linetype = "Simulation"),
alpha = .9, linewidth = .7) +
scale_color_manual(values = colors,  name = expression(~gamma[X])) +
scale_linetype_manual(values = c("Theory" = "dashed", "Simulation" = "solid"), name = expression(~gamma[X])) +
scale_x_continuous(limits = c(0.25, 5), expand = c(0,0), breaks = c(1, 3, 5), name = expression(symbol('\254')~~~Bifurcation~parameter~k)) +
scale_y_continuous(name = expression(gamma[X]), expand = c(0,0), breaks = c(0, 0.05, 0.075)) +
facet_grid(rows = vars(system), cols = vars(alpha_label), scales = "free", labeller = label_parsed) +
theme(legend.position = "bottom",
legend.direction = "horizontal") +
guides(color = guide_legend(ncol = 4, byrow = TRUE),
linetype = "none"))
df$alpha_label <- factor(df$alpha,
levels = rev(c(0.9)),
labels=rev(c('0.9'=parse(text=TeX('$\\alpha$ = 0.9')))))
df_mean$alpha_label <- factor(df_mean$alpha,
levels = rev(c(0.9)),
labels=rev(c('0.9'=parse(text=TeX('$\\alpha$ = 0.9')))))
legend_labels = (c(TeX("$\\alpha$ = 2"), TeX("$\\alpha$ = 1.8"), TeX("$\\alpha$ = 1.5"), TeX("$\\alpha$ = 1.3"), TeX("$\\alpha$ = 0.9"),, "Theory"))
colors = rev(c("2" = "black", "1.8" =  "#0072B2", "1.5" = "#009E73", "1.3" =  "#56B4E9", "0.9" =  "#56B4E9", "Theory" = "#D55E00"))
(p = ggplot() +
geom_vline(xintercept = 0, color = "black", linewidth = .75) +
geom_hline(yintercept = 0.025, color = "black", linewidth = 0.75) +
geom_line(data = df, aes(x = k, y = gamma_smoothed, group = interaction(run, alpha), color = as.factor(alpha), linetype = "Simulation"),
alpha = .75, linewidth = .001) +
geom_line(data = df[df$system == "Linear",], aes(x = k, y = gamma_true, group = interaction(system, alpha),
color = "Theory", linetype = "Theory"), linewidth = .6) +
geom_line(data = df_mean, aes(x = k, y = mean_gamma, color = as.factor(alpha), linetype = "Simulation"),
alpha = .9, linewidth = .7) +
scale_color_manual(values = colors,  name = expression(~gamma[X])) +
scale_linetype_manual(values = c("Theory" = "dashed", "Simulation" = "solid"), name = expression(~gamma[X])) +
scale_x_continuous(limits = c(0.25, 5), expand = c(0,0), breaks = c(1, 3, 5), name = expression(symbol('\254')~~~Bifurcation~parameter~k)) +
scale_y_continuous(name = expression(gamma[X]), expand = c(0,0), breaks = c(0, 0.05, 0.075)) +
facet_grid(rows = vars(system), cols = vars(alpha_label), scales = "free", labeller = label_parsed) +
theme(legend.position = "bottom",
legend.direction = "horizontal") +
guides(color = guide_legend(ncol = 4, byrow = TRUE),
linetype = "none"))
