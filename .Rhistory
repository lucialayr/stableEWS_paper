y = "Fixed Points") +
theme_minimal()
10^4
50/12
dt
T = 5
N = 2^15
dt = 1/N
dt
dt = 0.00005
N = 10^2
T = N/dt
T
-8.73274827e-04
(-8.73274827e-04*dt)^(1/1.3)
(-8.73274827e-04*dt)
1(1.3)
1/1.3
(-8.73274827e-04*dt)^2
(-8.73274827e-04*dt)^(1/2)
-8.73274827e-04*dt^(1/2)
-8.73274827e-04*dt^(1/1.3)
dt = 0.0005
N = 10Â²
N = 10^2
T = n/dt
T = N/dt
T = 5
N = 2^15
dt = 1/N
R = 4
Dt = R*dt
L = (N/T)*T
seq(from = dt, to = T+dt, by = dt)
length(seq(from = dt, to = T+dt, by = dt))
dt = 0.005
N = 10^4
T = N/dt
T
T
N
100000/(1+ 0.00001*100000)
100000/(1 + 0.00001*100000)
1/(1 + 0.00001*1)
10000000/(1+ 0.00001*10000000)
1000000000/(1+ 0.00001*1000000000)
1000000000/(1+ 0.0000000001*1000000000)
1000000000/(1+ 0.001*1000000000)
1/(1+ 0.001*1)
dt = 0.005
N = 10^4
T = N/dt
N = 10^3
T = N/dt
T
# Load necessary library
library(ggplot2)
# Define the flipped equation of motion
find_flipped_fixed_points <- function(k) {
# Define the flipped function U'(-x, k)
f_prime_flipped <- function(x) {
x^3  - x + k
}
# Find fixed points using the uniroot function for multiple initial guesses
fixed_points <- numeric()
for (x0 in seq(-3, 3, by = 0.5)) {
tryCatch({
x_fp <- uniroot(f_prime_flipped, c(x0 - 0.5, x0 + 0.5))$root
if (length(fixed_points) == 0 || !any(abs(fixed_points - x_fp) < 1e-5)) {
fixed_points <- c(fixed_points, x_fp)
}
}, error = function(e) {})
}
return(sort(fixed_points))
}
# Define range for k values
k_values <- seq(-2, 2, length.out = 100)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
k_values
# Define range for k values
k_values <- seq(-1, 1, b = 0.1)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- seq(-1, 1, b = 0.05)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- seq(-1, 1, b = 0.05)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.38, -0.38)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.37, -0.37)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.375, -0.375)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.375, 0.38,  -0.375, -0.38)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.37, 0.375, 0.38,  -0.375, -0.38, -0.37)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.36, 0.37, 0.375,  -0.375, -0.37, -0.36)
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_vline(xintercept = 0.38, color = "red") +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_vline(xintercept = 0.39, color = "red") +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.37, -0.37)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_vline(xintercept = 0.39, color = "red") +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.365, -0.365)
fixed_points_data <- data.frame(k = numeric(), x = numeric())
# Compute fixed points for each k
for (k in k_values) {
fixed_points <- find_flipped_fixed_points(k)
for (fp in fixed_points) {
fixed_points_data <- rbind(fixed_points_data, data.frame(k = k, x = fp))  # No need to flip y-values here
}
}
# Plot the flipped bifurcation diagram
ggplot(fixed_points_data, aes(x = k, y = x)) +
geom_vline(xintercept = 0.39, color = "red") +
geom_point(size = 1) +
labs(title = "Flipped Bifurcation Diagram",
x = "Bifurcation Parameter k",
y = "Fixed Points") +
theme_minimal()
# Define range for k values
k_values <- c(seq(-1, 1, b = 0.05), 0.37, -0.367)
log(0)
log(0.00001)
log(0.0000000001)
log(0.000000000000000000000000000001)
2/(3*sqrt(3))
dt = 0.005
N = 10^2
T = N/dt
5.5/82.7
#gamma non-equilibrium runs
plot_gamma_neq = function(A =c(1.3, 1.5, 1.8, 2), cutoff_theory = .15) {
data = list()
for (a in A) {
df = read.csv(paste0("data/gamma_lin_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Linear",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df_nol = read.csv(paste0("data/gamma_nol_neq_alpha", a, ".csv")) %>%
filter(k != 0) %>%
mutate(system = "Non-linear \n(Fold)",
alpha = paste0(a)) %>%
filter(gamma_sample != 0)
df = df_nol %>%
full_join(df) %>%
mutate(gamma_true = 0.1*(1/(a*k))^(1/a))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows) %>%
filter(timestep > 1000) %>%
group_by(alpha, system, sample) %>%
arrange(alpha, system, sample, k) %>%
mutate(gamma_smoothed = slider::slide_dbl(gamma_sample, mean, .before =50, .after = 50)) %>%
filter(gamma_true < cutoff_theory,
gamma_smoothed < cutoff_theory)
df_mean = df %>%
group_by(alpha, k, system) %>%
summarize(mean_gamma = mean(gamma_smoothed, na.rm = TRUE)) %>%
group_by(system) %>%
mutate(mean_max = max(mean_gamma),
mean_min = min(mean_gamma)) %>%
ungroup()
df$alpha_label <- factor(df$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
df_mean$alpha_label <- factor(df_mean$alpha,
levels = rev(c(2, 1.8, 1.5, 1.3)),
labels=rev(c('2'=parse(text=TeX('$\\alpha$ = 2')),
'1.8'=parse(text=TeX('$\\alpha$ = 1.8')),
'1.5'=parse(text=TeX('$\\alpha$ = 1.5')),
'1.3'=parse(text=TeX('$\\alpha$ = 1.3')))))
legend_labels = (c(TeX("$\\alpha$ = 2"), TeX("$\\alpha$ = 1.8"), TeX("$\\alpha$ = 1.5"), TeX("$\\alpha$ = 1.3"), "Theory"))
colors = rev(c("2" = "black", "1.8" =  "#0072B2", "1.5" = "#009E73", "1.3" =  "#56B4E9", "Theory" = "#D55E00"))
(p = ggplot() +
geom_vline(xintercept = 0, color = "black", linewidth = .75) +
geom_hline(yintercept = 0.025, color = "black", linewidth = 0.75) +
geom_line(data = df, aes(x = k, y = gamma_smoothed, group = interaction(run, alpha), color = as.factor(alpha), linetype = "Simulation"),
alpha = .75, linewidth = .001) +
geom_line(data = df[df$system == "Linear",], aes(x = k, y = gamma_true, group = interaction(system, alpha),
color = "Theory", linetype = "Theory"), linewidth = .6) +
geom_line(data = df_mean, aes(x = k, y = mean_gamma, color = as.factor(alpha), linetype = "Simulation"),
alpha = .9, linewidth = .7) +
scale_color_manual(values = colors,  name = expression(~gamma[X])) +
scale_linetype_manual(values = c("Theory" = "dashed", "Simulation" = "solid"), name = expression(~gamma[X])) +
scale_x_continuous(limits = c(0.25, 5), expand = c(0,0), breaks = c(1, 3, 5), name = expression(symbol('\254')~~~Bifurcation~parameter~k)) +
scale_y_continuous(name = expression(gamma[X]), limits = c(0.025, 0.11), expand = c(0,0), breaks = c(0, 0.05, 0.1)) +
facet_grid(rows = vars(system), cols = vars(alpha_label), scales = "free", labeller = label_parsed) +
theme(legend.position = "bottom",
legend.direction = "horizontal") +
guides(color = guide_legend(ncol = 4, byrow = TRUE),
linetype = "none"))
return(p)
}
library(tidyverse)
library(scico)
library(reshape2)
library(stringr)
library(cowplot)
library(ggallin)
library(ggnewscale)
library(ggridges)
library(stable)
library(zoo)
library(scales)
library(latex2exp)
setwd("~/02_Science/alphastableEWS_paper")
theme_set(
theme_classic() +
theme(
axis.text = element_text(color = "black", size = 15),
axis.title = element_text(color = "black", size = 15),
plot.title = element_text(color = "black", size = 15),
plot.subtitle = element_text(color = "black", size = 15),
plot.caption = element_text(color = "black", size = 15),
strip.text = element_text(color = "black", size = 15),
legend.text = element_text(color = "black", size = 15),
legend.title = element_text(color = "black", size = 15),
axis.line = element_line(color = "black"),
panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.background = element_rect(fill='transparent', color = NA),
legend.box.background = element_rect(fill='transparent', color = NA),
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
strip.background = element_rect(fill = "transparent", color = NA)
)
)
plot_gamma_neq()
ggsave("reports/paper/gamma_noneq_diss.pdf",  width = 10, height = 6, scale = 1)
variance_convergance = function() {
data = list()
A = c(2, 1.5)
for (a in A) {
df = read.csv(paste0("data/convergance_alpha", a, ".csv")) %>%
filter(gamma_sample != 0) %>%
mutate(alpha = a) %>%
melt(measure.vars = c("var", "gamma_sample"))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows) %>%
group_by(alpha, variable, run) %>%
arrange(alpha, variable, run, time_step) %>%
mutate(value_smoothed = slider::slide_dbl(value, mean, .before = 0, .after = 0),
time_step = time_step - 40000)
df$alpha = factor(df$alpha, levels = c(1.5, 2))
df_mean = df %>%
group_by(alpha, variable, time_step) %>%
summarize(value = mean(value_smoothed))
colors_lines = c("#0072B2", "black")
colors = c("#0072B2", "black")
levels(df$variable) = c("Var~X", expression(gamma[X]))
levels(df_mean$variable) = c("Var~X", expression(gamma [X]))
(p = ggplot() +
geom_vline(xintercept = 0, color = "black", linewidth = .75) +
geom_line(data = df, aes(x = time_step, y = value_smoothed, colour = alpha, group = interaction(run, alpha)), linewidth = .001, alpha = .75) +
scale_color_manual(values = colors_lines, name = expression(alpha)) +
ggnewscale::new_scale_color() +
geom_line(data = df_mean, aes(x = time_step, y = value, colour = alpha, group = interaction(alpha)), alpha = .9, linewidth = .6) +
scale_color_manual(values = colors, name = expression(alpha)) +
scale_y_continuous(trans = "log10", name = "EWS", limits = c(0.0001, .25), expand = c(0,0)) +
scale_x_continuous(name = "Simulation timestep", limits = c(0, 10000), expand = c(0,0), breaks = c(0, 2500, 7500)) +
facet_wrap(~variable, labeller=label_parsed) +
theme(legend.position = "bottom",
legend.direction = "horizontal"))
return(p)
}
variance_convergance()
variance_convergance = function() {
data = list()
A = c(2, 1.5)
for (a in A) {
df = read.csv(paste0("data/convergance_alpha", a, ".csv")) %>%
filter(gamma_sample != 0) %>%
mutate(alpha = a) %>%
melt(measure.vars = c("var", "gamma_sample"))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows) %>%
group_by(alpha, variable, run) %>%
arrange(alpha, variable, run, time_step) %>%
mutate(value_smoothed = slider::slide_dbl(value, mean, .before = 0, .after = 0),
time_step = time_step - 40000)
df$alpha = factor(df$alpha, levels = c(1.5, 2))
df_mean = df %>%
group_by(alpha, variable, time_step) %>%
summarize(value = mean(value_smoothed))
colors_lines = c("#0072B2", "black")
colors = c("#0072B2", "black")
levels(df$variable) = c("Var~X", expression(gamma[X]))
levels(df_mean$variable) = c("Var~X", expression(gamma [X]))
(p = ggplot() +
geom_vline(xintercept = 0, color = "black", linewidth = .75) +
geom_line(data = df, aes(x = time_step, y = value_smoothed, colour = alpha, group = interaction(run, alpha)), linewidth = .001, alpha = .5) +
scale_color_manual(values = colors_lines, name = expression(alpha)) +
ggnewscale::new_scale_color() +
geom_line(data = df_mean, aes(x = time_step, y = value, colour = alpha, group = interaction(alpha)), alpha = .9, linewidth = .6) +
scale_color_manual(values = colors, name = expression(alpha)) +
scale_y_continuous(trans = "log10", name = "EWS", limits = c(0.0001, .25), expand = c(0,0)) +
scale_x_continuous(name = "Simulation timestep", limits = c(0, 10000), expand = c(0,0), breaks = c(0, 2500, 7500)) +
facet_wrap(~variable, labeller=label_parsed) +
theme(legend.position = "bottom",
legend.direction = "horizontal"))
return(p)
}
variance_convergance()
variance_convergance = function() {
data = list()
A = c(2, 1.5)
for (a in A) {
df = read.csv(paste0("data/convergance_alpha", a, ".csv")) %>%
filter(gamma_sample != 0) %>%
mutate(alpha = a) %>%
melt(measure.vars = c("var", "gamma_sample"))
data = append(data, list(df))
}
df = purrr::reduce(data, bind_rows) %>%
group_by(alpha, variable, run) %>%
arrange(alpha, variable, run, time_step) %>%
mutate(value_smoothed = slider::slide_dbl(value, mean, .before = 0, .after = 0),
time_step = time_step - 40000)
df$alpha = factor(df$alpha, levels = c(1.5, 2))
df_mean = df %>%
group_by(alpha, variable, time_step) %>%
summarize(value = mean(value_smoothed))
colors_lines = c("#0072B2", "black")
colors = c("#0072B2", "black")
levels(df$variable) = c("Var~X", expression(gamma[X]))
levels(df_mean$variable) = c("Var~X", expression(gamma [X]))
(p = ggplot() +
geom_vline(xintercept = 0, color = "black", linewidth = .75) +
geom_line(data = df, aes(x = time_step, y = value_smoothed, colour = alpha, group = interaction(run, alpha)), linewidth = .001, alpha = .1) +
scale_color_manual(values = colors_lines, name = expression(alpha)) +
ggnewscale::new_scale_color() +
geom_line(data = df_mean, aes(x = time_step, y = value, colour = alpha, group = interaction(alpha)), alpha = .9, linewidth = .6) +
scale_color_manual(values = colors, name = expression(alpha)) +
scale_y_continuous(trans = "log10", name = "EWS", limits = c(0.0001, .25), expand = c(0,0)) +
scale_x_continuous(name = "Simulation timestep", limits = c(0, 10000), expand = c(0,0), breaks = c(0, 2500, 7500)) +
facet_wrap(~variable, labeller=label_parsed) +
theme(legend.position = "bottom",
legend.direction = "horizontal"))
return(p)
}
variance_convergance()
variance_convergance()
ggsave("reports/paper/variance_convergance_diss.pdf", width = 9, height = 4, scale = 1)
